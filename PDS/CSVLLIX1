         TITLE 'CSVLLIX1 - LLA Fetch Installation Exit'
CSVLLIX1 CSECT
***********************************************************************
*
*  BASE PROGRAM TAKEN FROM 'SYS1.SAMPLIB(CSVLLIX1)'
*  See there for updated documentation about this exit in general
*  Note: contrary to exit documentation, we don't serialize at all
*        the access to the table that contains module usage
*        this did not give any real problem in practice...
*
***********************************************************************
* MAIN                                                                *
***********************************************************************
CSVLLIX1 AMODE 31
CSVLLIX1 RMODE ANY
         USING *,R15
         PRINT GEN
         SAVE  (14,12),,CSVLLIX1.SAMPLE.&SYSDATE..H.&SYSTIME SAVE REGS
         STM   R14,R12,12(R13)         Save entry registers.
         LR    R12,R15                 INITIALIZE BASE REGISTER.
         DROP  R15                     Drop temporary addressability.
         USING CSVLLIX1,R12            ESTABLISH R12 AS CODE REGISTER.
*        INITIAL GETMAIN DONE AFTERWARD, ONLY IF REQUIRED
SEEMODUL DS    0H
         LR    R4,R1          LOAD REGISTER 4 WITH POINTER TO
*                                      PARAMETER LIST
         USING LLP1,R4                 ADDRESSABILITY TO LLP1.
         LA    R2,LLP1PDS2    MODULE NAME  FROM INPUT PARMS
         CLC   0(5,R2),CSVLL  SPECIAL NAMES THAT ACT AS TRIGGERS
         BE    GOAHEAD        SPECIAL PROCESSING
         L     R8,LLP1USER    POINTER TO ACQUIRED AREA POINTER
         L     R8,0(R8)       ADDRESS OF ACQUIRED AREA
         LTR   R8,R8          ANY ADDRESS THERE ?
         BZ    OUTQUICK       AREA NOT IN USE
         USING TABFIRST,R8
         LA    R3,MODLIST     MODULES LIST TABLE
MODCHECK CLI   0(R3),C' '     END OF MODULE LIST
         BE    OUTQUICK       THEN WE ARE NOT INTERESTED
         CLC   0(MODSTEP,R2),0(R3) IF MODULE TO BE TAKEN CARE OF
         BE    CHKJOBNM       SEE IF THE JOBNAME IS GOOD TOO
         LA    R3,MODSTEP(R3) NEXT ENTRY
         B     MODCHECK
*        CHECK IF THE JOBNAME  IS ONE WE ARE INTERESTED IN
CHKJOBNM DS    0H
         USING PSA,R0
         L     R2,PSAAOLD  ASCB OLD POINTER
         USING ASCB,R2
         L     R9,ASCBJBNI JOBNAME POINTER
         LTR   R9,R9       IF ZERO, WE USE ASCBJBNS
         BNZ   OKJOBNAM
         L     R9,ASCBJBNS
         LTR   R9,R9       IF ZERO, WE GIVE UP - SHOULD NOT OCCUR
         BZ    OUTQUICK
OKJOBNAM LR    R2,R9
         DROP  R2
*
*        SCAN JOBNAMES TABLE WITH BINARY SCAN
*
         LA    R9,JOBLIST             JOB NAMES TABLE FIRST ELEMENT
         LR    R10,R9
         LA    R10,NJOBS*8(R10)  JOB NAMES TABLE LAST  ELEMENT
SEEMORE  DS    0H
         SR    R0,R0
         LR    R1,R10                 FOR LATER COMPARE
         SR    R1,R9
         D     R0,=F'8'   DIVIDE BY JOBNAME TABLE STEP
         LTR   R0,R0      ANY REMAINDER
         BZ    DONTADD
         LA    R1,1(R1)   +1, JUST IN CASE
DONTADD  DS    0H
         LR    R5,R1
         SRL   R5,1   / 2
         LTR   R5,R5
         BNH   SEETHIS
         SLL   R5,3   * 8
         AR    R5,R9 SOMEWHERE IN THE MIDDLE
         CLC   0(8,R5),0(R2)     TABLE JOBNAME / CURRENT JOBNAME
         BE    GOAHEAD
         BL    GODOWN
         B     GOUP
*
GODOWN   LR    R9,R5  AFTER THIS PART OF THE TABLE
         B     SEEMORE
*
GOUP     LR    R10,R5 BEFORE THIS PART OF THE TABLE
         B     SEEMORE
*
SEETHIS  LR    R5,R9
         CLC   0(8,R5),0(R2)     TABLE JOBNAME / CURRENT JOBNAME
         BE    GOAHEAD
         LR    R5,R10
         CLC   0(8,R5),0(R2)     TABLE JOBNAME / CURRENT JOBNAME
         BE    GOAHEAD
         B     OUTQUICK
*        EXITING BEFORE HAVING DONE THE GETMAIN IS FROM LABEL OUTQUICK
GOAHEAD  DS    0H
         L     R0,SIZDATD              LOAD REGISTER 0 WITH SIZE FOR
*                                      GETMAIN
         GETMAIN R,LV=(0)              ISSUE REGISTER FORM OF GETMAIN
*                                      FOR AREA IN SUBPOOL 0
         LTR   R15,R15                 GETMAIN CAN GO WRONG...
         BNZ   OUTQUICK
         LR    R11,R1                  LOAD REGISTER 11 WITH ADDRESS OF
*                                      GETMAINED AREA
         USING DATD,R11                ESTABLISH ADDRESSABILITY TO
*                                      GETMAINED AREA
         ST    R13,SAVEAREA+4          SAVE REGISTER 13 FOR SAVEAREA
*                                      CHAINING
         LM    R0,R1,20(R13)           RELOAD REGISTERS 0 AND 1 FROM
*                                      PREVIOUS SAVEAREA
         ST    R11,8(,R13)             SAVE ADDRESS OF CURRENT SAVEAREA
         LR    R13,R11                 LOAD REGISTER 13 WITH ADDRESS OF
*                                      CURRENT SAVEAREA
         CLC   LLP1PDS2(8),=CL8'CSVLLDEA' DEACTIVATE?
         BE    FRETABLE                DO FREEMAIN OF TABLE
*                                      AND CLEAR USER FIELD
         CLC   LLP1PDS2(8),=CL8'CSVLLACT' SE DOBBIAMO INIZIARE LA COSA
         BE    GETTABLE                DO GETMAIN OF TABLE
         CLC   LLP1PDS2(5),CSVLL       other eventual csvll* ignores
         BE    EXIT                    so, exit...
         L     R8,LLP1USER    POINTER TO ACQUIRED AREA POINTER
         L     R8,0(R8)       ADDRESS OF ACQUIRED AREA
         LTR   R8,R8          ANY ADDRESS THERE ?
         BZ    EXIT                    ...EXIT NOT ACTIVE YET
         B     INSERTIT
*
FRETABLE DS    0H
         L     R8,LLP1USER    POINTER TO ACQUIRED AREA POINTER
         L     R8,0(R8)       ADDRESS OF ACQUIRED AREA
         LTR   R8,R8          ANY ADDRESS THERE ?
         BZ    EXIT           AREA NOT IN USE
         L     R0,TABDATD              LOAD REGISTER 0 WITH SIZE FOR
*                                      FREEMAIN
         LR    R1,R8          ADDRESS OF AREA TO BE FREEMAINED
         SR    R14,R14
* Subpool 241 (ECSA, not FETCH PROTECTED)
         LA    R14,241
*        LA    R14,0         TESTONLY USE SUBPOOL 0
         FREEMAIN RU,LV=(0),A=(1),SP=(14)
*        IF FREEMAIN FAILS, GIVE UP
         LTR   R15,R15
         BNZ   EXIT
         MVC   MSGLEN,=H'63'
         MVC   MSGFLAG,=X'0200'
         MVC   MSGID,=CL8'MSGID02'
         MVI   JOBFILL,C' '
         MVC   MESSAGE,=CL50'12345678 AREA RELEASED BY CSVLLIX1'
         ST    R8,LLP1ADDR
         UNPK  EXDIWORK(15),LLP1ADDR(8)
         MVC   MESSAGE(8),EXDIWORK
         TR    MESSAGE(8),TRTABLE-240
         L     R8,LLP1USER
         XC    0(4,R8),0(R8)    clear address of area
         WTO   MF=(E,MSGAREA)
         B     EXIT
GETTABLE DS    0H
         L     R8,LLP1USER    POINTER TO ACQUIRED AREA POINTER
         L     R8,0(R8)       ADDRESS OF ACQUIRED AREA
         LTR   R8,R8          ANY ADDRESS THERE ?
         BNE   EXIT           AREA ALREADY ACQUIRED
* Subpool 241 (ECSA, not FETCH PROTECTED)
         L     R0,TABDATD              LOAD REGISTER 0 WITH SIZE FOR
*                                      GETMAIN
         SR    R14,R14
         LA    R14,241
*        LA    R14,0         TESTONLY USE SUBPOOL 0
         GETMAIN RU,LV=(0),BNDRY=PAGE,LOC=ANY,SP=(14)
*        if getmain fails, give up
         LTR   R15,R15
         BNZ   EXIT
*
         L     R8,LLP1USER    POINTER TO ACQUIRED AREA POINTER
         ST    R1,0(R8)       FUTURE MEMORY
         LR    R8,R1          TAB ADDRESS IN R8
*        MOVELONG skipped area supposed to be clear
*        PREPARE FOR MOVELONG
*        LR    R0,R1          TO CLEAR
*        SR    R1,R1          CLEAR REG
*        ICM   R1,7,TABDATD+1  INSERT LENGTH
*        LA    R14,=F'0'      A PLACE ZERO FILLED
*        SR    R15,R15        ZERO LENGTH
*        MVCL  R0,R14         CLEAR GETMAINED AREA (EVENTUALLY)
         MVC   MSGLEN,=H'63'
         MVC   MSGFLAG,=X'0200'
         MVC   MSGID,=CL8'MSGID01'
         MVI   JOBFILL,C' '
         MVC   MESSAGE,=CL50'12345678 ADDRESS OF CSVLLIX1 TABLE'
         ST    R8,LLP1ADDR
         UNPK  EXDIWORK(15),LLP1ADDR(8)
         MVC   MESSAGE(8),EXDIWORK
         TR    MESSAGE(8),TRTABLE-240
         WTO   MF=(E,MSGAREA)
         USING TABFIRST,R8
*        TABLE INITIALIZATION
*        THE FIRST LINE CONTAINS COUNTERS ETC.
*        THE SECOND LINE CONTAINS THE FIRST  4 CHARS OF JOBNAMES
*        THE THIRD  LINE CONTAINS THE SECOND 4 CHARS OF JOBNAMES
*        FROM THE FOURTH LINE, THE TABLE ITSELF
         LA    R1,NJOBS   NJOBS UPPER LIMIT=4095 (100 AT THE MOMENT)
         ST    R1,TABNJOBS
         SLL   R1,2       X 4  FOUR BYTES FOR EACH COUNTER
         LA    R1,8+4(R1) MODNAME, FLAGS
         ST    R1,TABSTEP    STEP OF THE TABLE
         XC    TABINUSE,TABINUSE NUMBER OF USED ELEMENTS
         SR    R2,R2
         L     R3,=AL4(TABSIZE)
         DR    R2,R1
         ST    R3,TABMAX   MAX NUMBER OF ENTRIES
* THE REMAINING FIELDS OF FIRST LINE ARE INITIALIZED LATER
         LR    R1,R8
         A     R1,TABSTEP TO SECOND LINE
         LA    R1,8(R1) TO START OF ELEMENTS
         LR    R2,R1
         A     R2,TABSTEP TO THIRD  LINE
         LA    R3,JOBLIST
MOVEJOBN CLI   0(R3),X'FF'  EOF MARKER
         BE    EXIT         ...NOW WE HAVE AN EMPTY TABLE
         MVC   0(4,R1),0(R3)
         MVC   0(4,R2),4(R3)
         LA    R1,4(R1)
         LA    R2,4(R2)
         LA    R3,8(R3)
         B     MOVEJOBN
*
* R5 CONTAINS A POINTER TO THE CURRENT ENTRY IN THE JOB LIST
*
INSERTIT DS    0H
         LA    R2,LLP1PDS2   MODULE NAME  FROM INPUT PARMS
         LA    R9,JOBLIST    JOB NAMES TABLE FIRST ELEMENT
         SR    R5,R9        COLUMN
         SRL   R5,1         DISPLACEMENT (Â£ OF ENTRY X 4)
*
         CLC   TABSTART,=F'0'  IF FIRST ENTRY
         BE    FIRSTONE
         CLC   TABSTART,TABEND  IF SECOND ENTRY
         BE    ONLYONE
         L     R9,TABSTART
         CLC   0(8,R2),0(R9)
         BE    INCCOUNT
         BL    NEWFIRST
         L     R9,TABEND
         CLC   0(8,R2),0(R9)
         BE    INCCOUNT
         BH    NEWLAST
         LR    R6,R9
         S     R6,TABSTEP
* THEN IT IS INSIDE, DO A BINARY SEARCH
* AT LEAST TWO ELEMENTS IN TABLE, AND THE ENTRY IS NOT AT THE
* BOUNDARIES OF THE TABLE
         L     R9,TABSTART    USEFUL START OF TABLE
         L     R10,TABEND     LAST ENTRY IN TABLE
SEEMORET DS    0H
         SR    R0,R0   CLEAN R0
         LR    R1,R10  TABEND
         SR    R1,R9   -TABSTART
         LTR   R1,R1   IF  ZERO, IT MUST BE HERE
         BH    SETINCR
         L     R9,TABSTART
         B     SEETHIST
SETINCR  DS    0H
         C     R1,TABSTEP  IF == TABSTEP, IT MUST BE HERE
         BE    SEETHIST
         D     R0,TABSTEP  DIVIDE BY TABSTEP, AND TEST FOR REMAINDER
         LR    R0,R0       ANY REMAINDER? IF SO ADD ONE TO RESULT
         BZ    DONTADDT
         LA    R1,1(R1)    ADD ONE...
DONTADDT DS    0H
         SRL   R1,1        DIVIDE BY TWO
         LR    R6,R1
         MH    R6,TABSTEP+2   AN INCREMENT
         LTR   R6,R6
         BNH   SEETHIST
         AR    R6,R9 SOMEWHERE IN THE MIDDLE
         CLC   0(8,R2),0(R6)     INPUT MODNAME / TABLE MODNAME
         BE    GOAHEADT
         BH    GODOWNT
         B     GOUPT
*
GODOWNT  LR    R9,R6  AFTER THIS PART OF THE TABLE
         LR    R6,R1
         B     SEEMORET
*
GOUPT    LR    R10,R6 BEFORE THIS PART OF THE TABLE
         LR    R6,R1
         B     SEEMORET
*
GOAHEADT LR    R9,R6  WE ARE IN THE GOOD ENTRY
         B     INCCOUNT
*
SEETHIST DS    0H
*        CR    R9,R10
*        BNE   *+6
*        DC    H'0'
         LR    R6,R9
         CLC   0(8,R6),0(R2)     TABLE MODNAME / CURRENT MODNAME
         BE    INCCOUNT
         BH    INSBEFOR
*        DC    H'0'
         B     INSAFTER
*
INSAFTER DS    0H
         A     R9,TABSTEP
         B     INSBEFOR
*
FIRSTONE DS    0H
         LR    R9,R8  START OF TAB
         A     R9,TABSTEP  TO THE SECOND LINE
         A     R9,TABSTEP  TO THE THIRD LINE
         A     R9,TABSTEP  TO THE FOURTH (FIRST USEFUL) LINE
         ST    R9,TABSTART DETAIL TABLE USAGE
         ST    R9,TABEND
         B     INITLINE
*
INITLINE DS    0H
*        CLEAR THE NEW LINE
         L     R1,TABSTEP
         LR    R0,R9  CURRENT LINE
         LA    R14,=F'0'
         SR    R15,R15
         MVCL  R0,R14
*        INITIALIZE WITH MODULE NAME
         MVC   0(8,R9),0(R2)  PUT IN MODULE NAME
         L     R10,TABINUSE THERE IS ALWAYS A FIRST TIME
         LA    R10,1(R10)  ADD ONE
         ST    R10,TABINUSE THERE IS ALWAYS A FIRST TIME
         B     INCCOUNT
*
ONLYONE  DS    0H
         L     R9,TABSTART    USEFUL  START OF TABLE
         CLC   0(8,R2),0(R9)  SAME MODULE
         BE    INCCOUNT
         BL    NEWFIRST
         B     NEWLAST
*
* ADD A NEW TABLE ENTRY BEFORE OR AFTER THE OLD ONE
* SHIFT ACCORDINGLY ALL ENTRIES TO MAKE ROOM FOR THE NEW ONE
*
NEWLAST  DS    0H
         CLC   TABINUSE,TABMAX
         BNL   EXIT         IGNORE AFTER FILLING TABLE
         L     R9,TABEND
         A     R9,TABSTEP
         ST    R9,TABEND    NEW END OF TABLE
         B     INITLINE
*
NEWFIRST DS    0H
*        MOVE EVERYTHING DOWN ONE LINE
         CLC   TABINUSE,TABMAX
         BNL   EXIT         IGNORE AFTER FILLING TABLE
         L     R0,TABEND
         A     R0,TABSTEP   - TARGET LINE
         L     R14,TABEND   - SOURCE ADDRESS
NEWFMVCL DS    0H
         L     R1,TABSTEP   - TARGET LENGTH, ONE ENTRY
         LR    R15,R1       - SOURCE LENGTH  = TARGET LENGTH
         MVCL  R0,R14
         S     R14,TABSTEP
         S     R14,TABSTEP
         S     R0,TABSTEP
         S     R0,TABSTEP
         C     R0,TABSTART
         BL    NEWFDONE
         B     NEWFMVCL
NEWFDONE DS    0H
         L     R0,TABEND
         A     R0,TABSTEP
         ST    R0,TABEND    - NEW LAST LINE
         B     INITLINE
*
INSBEFOR DS    0H
         CLC   TABINUSE,TABMAX
         BNL   EXIT         IGNORE AFTER FILLING TABLE
*        MOVE EVERYTHING DOWN ONE LINE,
*        ENDING WITH THE CURRENT LINE (R9)
         L     R0,TABEND
         A     R0,TABSTEP   - TARGET LINE
         L     R14,TABEND   - SOURCE ADDRESS
INSBMVCL DS    0H
         L     R1,TABSTEP   - TARGET LENGTH, ONE ENTRY
         LR    R15,R1       - SOURCE LENGTH  = TARGET LENGTH
         MVCL  R0,R14
         S     R14,TABSTEP
         S     R14,TABSTEP
         S     R0,TABSTEP
         S     R0,TABSTEP
         CR    R0,R9
         BL    INSBDONE
         B     INSBMVCL
* R9 SHOULD BE OK
INSBDONE DS    0H
         L     R0,TABEND
         A     R0,TABSTEP
         ST    R0,TABEND    - NEW LAST LINE
         B     INITLINE
*
* INCREMENT COUNT - R5 CONTAINS NUMBER OF JOB IN THE TABLE
*                   ALREADY IN FORM OF A DISPLACEMENT
INCCOUNT DS    0H
         L     R10,TABHITS
         LA    R10,1(R10)
         ST    R10,TABHITS
         LA    R9,8(R9)   TO START OF COUNTERS
         AR    R9,R5       GET TO THE ENTRY
         L     R10,0(R9)   WHAT WAS THERE
         LA    R10,1(R10)  ADD ONE
         ST    R10,0(R9)   DONE UPDATE
         B     EXIT
*
         DROP  R8
***********************************************************************
* EXIT WHEN NO GETMAIN DONE                                           *
***********************************************************************
OUTQUICK LA    R15,#RCIX1_DEFAULT      Initialize return code.
         LA    R0,#RSIX1_DEFAULT       Initialize reason code.
         L     R14,12(,R13)            Restore the return address.
         LM    R1,R12,24(R13)          Restore others except R15 and R0
         BR    R14                     Return to the caller.
***********************************************************************
* Standard exit linkage.                                              *
***********************************************************************
EXIT     L     R13,4(,R13)             RESTORE REGISTER 13
         L     R0,SIZDATD              LOAD REGISTER 0 WITH SIZE OF
*                                      GETMAINED AREA
         LR    R1,R11                  LOAD REGISTER 1 WITH ADDRESS OF
*                                      GETMAINED AREA
         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA
*         LTR   R15,R15
*         BZ    *+6
*        DC    H'0'
         LA    R15,#RCIX1_DEFAULT      INITIALIZE RETURN CODE.
         LA    R0,#RSIX1_DEFAULT       INITIALIZE REASON CODE.
*                                      CODE
         L     R14,12(,R13)            LOAD REGISTER 14 WITH RETURN
*                                      ADDRESS
         LM    R1,R12,24(R13)          Restore others except R15 and R0
         BR    R14                     Return to the caller.
         YREGS
*                                      return code at exit.
         TITLE 'VARIOUS DATA AREAS'
*        IN  THE TABLE ALL WHAT STARTS WITH...
CSVLL    DC  CL5'CSVLL'
TRTABLE DC C'0123456789ABCDEF'  for hexadecimal translation
         LTORG
*        PGMNAMES MONITORED
         COPY  CSVLPGMS
*        JOBNAMES MONITORED  (Keep in Alpha order)
         COPY  CSVLJOBS
TABFIRST DSECT
         DS    0D
TABSTEP  DS    F     LENGTH OF EACH LINE IN THE TABLE
TABINUSE DS    F     NUMBER OF USED LINES SO FAR
TABMAX   DS    F     MAX NUMBER OF LINES
TABNJOBS DS    F     NUMBER OF JOBS PER EACH LINE
TABHITS  DS    F     TOTAL NUMBER OF HITS
TABSTART DS    F     START OF TABLE (POINTER TO FIRST USED LINE)
TABEND   DS    F     END   OF TABLE (POINTER TO LAST  USED LINE)
DATD     DSECT
         DS    0F
SAVEAREA DS    18F
EXDIWORK DS    CL16
LLP1ADDR DS    CL16
MSGAREA  DS    0H
MSGLEN   DS    H'0' 2+2+8+1+50=63
MSGFLAG  DS    H'0'    0X0200 == 512
MSGID    DS    CL8
JOBFILL  DS    CL1
MESSAGE  DS    CL50
MSGLUNG  EQU   *-MSGAREA
ENDDATD  EQU   *
         EJECT
CSVLLIX1 CSECT
         DS    0F
SIZDATD  DC    AL1(0)
         DC    AL3(ENDDATD-DATD)
TABDATD  DC    AL4(TABSIZE)
TABSIZE  EQU   1024*1024
         EJECT
         IHALLP1
         IHAPSA  DSECT=YES,LIST=YES
         CVT     DSECT=YES,LIST=YES
         IHAASCB DSECT=YES,LIST=YES
         END
